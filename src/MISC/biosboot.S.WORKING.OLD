/*
 *  Copyright (C) 1999 by Anders Gavare.  All rights reserved.
 *
 *  biosboot.S: i386 boot sector code
 *
 *  Load the kernel and relocate it to address 0x100000.
 *  Jump to 0x100020 (where we assume that the kernel should start execution)
 *
 *  History:
 *
 *	28 Sep 1999	first test with OpenBSD bootsector code,
 *			enabling A20 using the PS/2 method
 *	28 Dec 1999	clean-up, adding enabling A20 the AT-way...
 *	6 Jun 2000	no 64KB kernel image limit
 *
 *  Original copyright follows:
 */

/*
 * Copyright (c) 1997 Michael Shalayeff, Tobias Weingartner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Michael Shalayeff.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR 
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

	.file	"biosboot.S"

#include "asm.h"
#include "specialreg.h"
#include "param.h"

#define addr32  .byte 0x67
#define data32  .byte 0x66

#define	BLKCNT	10

#define	BOOTSEG			0x07c0	/* boot loaded here */
#define	BOOTSTACK		0x6ffc	/* stack starts here */
#define	TMPLOADSEG		0x0c00
#define	LOADADDR		0x10000
#define	RELOCADDR		0x100000
#define	RELOCSIZE		(0x9f000-LOADADDR)/4	/*  Nr of dwords to relocate  */
#define	EXECADDR		RELOCADDR+0x20
#define	SDT_MEMERAC		31      /* memory execute read accessed conforming */
#define	SDT_MEMRWA		19      /* memory read write accessed */
#define	DOSMBR_SIGNATURE	0xaa55
#define	DOSMBR_SIGNATURE_OFF	0x1fe


/* Clobbers %al - maybe more */
#define putc(c)			\
	movb	$c, %al;	\
	.byte	0xe8;		\
	.word	Lchr - . - 2

/* Clobbers %esi - maybe more */
#define	puts(s)			\
	data32;			\
	movl	$s, %esi;	\
	.byte	0xe8;		\
	.word	Lmessage - . - 2


	.text
	.globl	start
start:
	jmp	1f
	nop

	. = start + 3
	.asciz	"Yoctix"

	/* BPB */
	. = start + 0x0b
bpb:	.word	512		/* sector size */
	.byte	1		/* sectors/cluster */
	.word	1		/* reserved sectors */
	.byte	2		/* # of FAT */
	.word	0xe0		/* root entries */
	.word	2880		/* small sectors */
	.byte	0xf0		/* media type (f8=hd, f0=floppy) */
	.word	9		/* sectors/fat */
	.word	18		/* sectors per track */
	.word	2		/* # of heads */

	/* EBPB */
	. = start + 0x1c
ebpb:	.long	0		/* hidden sectors */
	.long	0		/* large sectors */
	.word	0		/* physical disk */
	.byte	0x29		/* signature, needed by NT */
	.space	4, 0		/* volume serial number */

	/* boot code */
	. = start + 0x3e

1:
	/* Fix up %cs just in case */
	data32
	ljmp	$BOOTSEG, $1f


load_msg:
	.asciz	"Loading"

1:
	/* set up stack (%ss:%esp) */
	cli			/* disable interrupts w/o stack */
	xorl	%ax, %ax
	movl	%ax, %ss
	data32
	movl	$BOOTSTACK, %esp
	sti			/* we have stack, do ints */

	/* Set up other segment regs */
	# movw	$BOOTSEG, %ax
	.byte	0xb8
	.word	BOOTSEG
	movl	%ax, %ds
	movl	%ax, %es
	movl	%ax, %fs
	movl	%ax, %gs


	/* Print pretty message */
	puts(load_msg)

	/* set up %es, (where we will load /boot to) */
	# movw	$(LOADADDR >> 4), %ax
	.byte	0xb8
	.word	LOADADDR >> 4
	movl	%ax, %es

	data32
	xorl	%ebx, %ebx		/* put it at %es:0 */
	addr32
	movb	_block_count, %cl	/* how many to read */
	movzbl	%cl, %ecx
	# movw	$_block_table, %si
	.byte	0xbe
	.word	_block_table

1:
	pushl	%cx
	putc('.')		/* show progress indicator */
	cld
	lodsl	/* word */	/* cylinder/sector */
	movl	%ax, %cx
	lodsb			/* head */
	movb	%al, %dh
	lodsb			/* # of sectors to load */
	movb	$0x2, %ah
	pushl	%ax

	push	%es
	mov	$0, %bl
	mov	$(TMPLOADSEG/256), %bh
	pushl	%bx
	pop	%es
	mov	$0, %bh

	int	$0x13
	pop	%es

	jnc	4f

	/* read error */
	puts(2f)
	cli
	hlt
2:	.asciz	"\r\nRead error"
3:	.asciz	"\r\n"

4:
	/*  move data from TMPLOADSEG:0 to es:bx  */
	popl	%ax
	data32
	movzbl	%al, %eax
	shll	$9, %ax		/*  512 bytes/sector == 32 paragraphs/sector  */

	pushl	%ax
	push	%ds
	pushl	%si
	pushl	%di
	data32
	xorl	%esi, %esi
	movl	%ebx, %edi
	.byte	0xb8
	.word	TMPLOADSEG
	pushl	%ax
	pop	%ds
	rep;	movsb
	popl	%di
	popl	%si
	pop	%ds
	popl	%ax

	/*  increase es  */
	shrl	$4, %ax
	pushl	%dx
	push	%es
	popl	%dx
	addl	%ax,%dx
	pushl	%dx
	pop	%es
	popl	%dx

	/*  next block:  */
	popl	%cx
	loop	1b

	puts(3b)

/*	xorl	%si, %si
	cld
*/


3:
	/*
	 *  Change to protected mode
	 */

	cli

	addr32
	data32
	lgdt	Gdtr

	movl	%cr0, %eax
	data32
	orl	$CR0_PE, %eax
	movl	%eax, %cr0	/* set the PE bit of CR0 */


	/*
	 *  Long jump into 32-bit mode...
	 */

	data32
	ljmp	$8, $(BOOTSEG << 4) + 1f


1:	/*
	 *  Now we're in 32-bit mode
	 */

	movl	$0x10, %eax
	movl	%ax, %ds
	movl	%ax, %ss
	movl	%ax, %es
	movl	%ax, %fs
	movl	%ax, %gs
	movl	$BOOTSTACK, %esp


	/*
	 *  Enable A20
	 */

	call	enablea20


	/*
	 *  Reallocate the kernel from LOADADDR to RELOCADDR
	 *  (above 1 MB, this is why we need the A20 to be turned on)
	 */

	movl	$LOADADDR, %esi
	movl	$RELOCADDR, %edi
	movl	$RELOCSIZE, %ecx
	rep;	movsl

/*	movzbl	%dl, %eax */	/* drive number is in the lowest byte */
/*	pushl	%eax */

	ljmp	$8, $EXECADDR



/*
 *  Display a string
 */

Lmessage:
	data32
	pushl	%eax
	cld
1:
	lodsb			# load a byte into %al
	testb	%al, %al
	jz	1f
	# call	Lchr
	.byte	0xe8
	.word	Lchr - . - 2
	jmp	1b



/*
 *  Display a char (%al)
 */

Lchr:
	data32
	pushl	%eax

	data32
	pushl	%ebx
	movb	$0x0e, %ah
	xorl	%bx, %bx
	incl	%bx		/* movw $0x01, %bx */
	int	$0x10
	data32
	popl	%ebx
1:
	data32
	popl	%eax
	ret



/*
 *  Enable A20
 *
 *  Inspired by Tran's "pmode" for DOS.
 */

enablea20:

	/*  Try to enable A20 the PS/2-way...  */
	inb	$0x92, %al
	or	$2, %al
	jmp	1f
1:	jmp	2f
2:	jmp	3f
3:	outb	%al, $0x92

	/*  And the AT way...  */
	call	enablea20kbwait
	movb	$0xd1, %al
	outb	%al, $0x64
	call	enablea20kbwait
	movb	$0xdf, %al
	outb	%al, $0x60
	call	enablea20kbwait

enablea20done:
	ret

enablea20kbwait:
	xorl	%ecx, %ecx
1:	jmp	2f
2:	jmp	3f
3:	jmp	4f
4:	inb	$0x64, %al
	testb	$2, %al
	loopnz	1b
	ret



/*
 *  Global Descriptor Table
 */

	.align	3
1:		/* 0x00 : null */
	.long	0, 0
		/* 0x08 : flat code */
	.word	0xFFFF			# lolimit
	.word	0			# lobase
	.byte	0			# midbase
	.byte	SDT_MEMERAC | 0 | 0x80	# RWXAC, dpl = 0, present
	.byte	0xf | 0 | 0x40 | 0x80	# hilimit, xx, 32bit, 4k granularity
	.byte	0			# hibase
		/* 0x10 : flat data */
	.word	0xFFFF			# lolimit
	.word	0			# lobase
	.byte	0			# midbase
	.byte	SDT_MEMRWA | 0 | 0x80	# RWA, dpl = 0, present
	.byte	0xf | 0 | 0x40 | 0x80	# hilimit, xx, 32bit, 4k granularity
	.byte	0			# hibase
Gdtr:	.word	. - 1b
	.long	(BOOTSEG << 4) + 1b

	.globl	_block_table, _block_count



/*
 *  Table containing a list of disk blocks to read
 */

_block_count:
	.byte	BLKCNT	/* entries in _block_table */

_block_table:
	.byte	1	/* sector (1-based!) */
	.byte	74	/* cylinder */
	.byte	0	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	74	/* cylinder */
	.byte	1	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	75	/* cylinder */
	.byte	0	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	75	/* cylinder */
	.byte	1	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	76	/* cylinder */
	.byte	0	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	76	/* cylinder */
	.byte	1	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	77	/* cylinder */
	.byte	0	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	77	/* cylinder */
	.byte	1	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	78	/* cylinder */
	.byte	0	/* head */
	.byte	18	/* nsect */

	.byte	1	/* sector (1-based!) */
	.byte	78	/* cylinder */
	.byte	1	/* head */
	.byte	18	/* nsect */



/*	. = _block_table + BLKCNT*4 */



/*
 *  End-of-sector signature
 */

	. = 0x200 - 2
	.word	DOSMBR_SIGNATURE

